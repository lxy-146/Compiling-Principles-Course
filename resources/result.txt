symbol_stack:# 
state_stack:0 
symbol_stack:# N 
state_stack:0 1 
symbol_stack:# N int 
state_stack:0 1 4 
symbol_stack:# N int ID 
state_stack:0 1 4 7 
symbol_stack:# N int ID M 
state_stack:0 1 4 7 9 
symbol_stack:# N int ID M A 
state_stack:0 1 4 7 9 13 
symbol_stack:# N int ID M A ( 
state_stack:0 1 4 7 9 13 16 
symbol_stack:# N int ID M A ( int 
state_stack:0 1 4 7 9 13 16 22 
symbol_stack:# N int ID M A ( int ID 
state_stack:0 1 4 7 9 13 16 22 25 
symbol_stack:# N int ID M A ( param 
state_stack:0 1 4 7 9 13 16 21 
symbol_stack:# N int ID M A ( param , 
state_stack:0 1 4 7 9 13 16 21 24 
symbol_stack:# N int ID M A ( param , int 
state_stack:0 1 4 7 9 13 16 21 24 22 
symbol_stack:# N int ID M A ( param , int ID 
state_stack:0 1 4 7 9 13 16 21 24 22 25 
symbol_stack:# N int ID M A ( param , param 
state_stack:0 1 4 7 9 13 16 21 24 21 
symbol_stack:# N int ID M A ( param , param , 
state_stack:0 1 4 7 9 13 16 21 24 21 24 
symbol_stack:# N int ID M A ( param , param , int 
state_stack:0 1 4 7 9 13 16 21 24 21 24 22 
symbol_stack:# N int ID M A ( param , param , int ID 
state_stack:0 1 4 7 9 13 16 21 24 21 24 22 25 
symbol_stack:# N int ID M A ( param , param , param 
state_stack:0 1 4 7 9 13 16 21 24 21 24 21 
symbol_stack:# N int ID M A ( param , param , parameter_list 
state_stack:0 1 4 7 9 13 16 21 24 21 24 28 
symbol_stack:# N int ID M A ( param , parameter_list 
state_stack:0 1 4 7 9 13 16 21 24 28 
symbol_stack:# N int ID M A ( parameter_list 
state_stack:0 1 4 7 9 13 16 19 
symbol_stack:# N int ID M A ( parameter 
state_stack:0 1 4 7 9 13 16 18 
symbol_stack:# N int ID M A ( parameter ) 
state_stack:0 1 4 7 9 13 16 18 23 
symbol_stack:# N int ID M A ( parameter ) { 
state_stack:0 1 4 7 9 13 16 18 23 27 
symbol_stack:# N int ID M A ( parameter ) { int 
state_stack:0 1 4 7 9 13 16 18 23 27 31 
symbol_stack:# N int ID M A ( parameter ) { int ID 
state_stack:0 1 4 7 9 13 16 18 23 27 31 44 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 30 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; int 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 31 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; int ID 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 31 44 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; inner_var_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 30 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 30 43 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; inner_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 30 43 61 
symbol_stack:# N int ID M A ( parameter ) { inner_var_declare ; inner_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 30 43 61 
symbol_stack:# N int ID M A ( parameter ) { inner_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 29 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = NUM 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 56 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 65 
symbol_stack:# N int ID M A ( parameter ) { inner_declare ID = expression ; 
state_stack:0 1 4 7 9 13 16 18 23 27 29 39 48 65 84 
symbol_stack:# N int ID M A ( parameter ) { inner_declare assign_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 38 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 54 75 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 54 75 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 54 75 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 54 75 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 54 75 93 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 79 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( expression ) 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 57 79 97 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 53 69 87 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 55 77 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 55 77 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 55 77 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 55 77 95 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 54 75 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + NUM 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 54 75 56 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 54 75 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 54 75 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 54 75 93 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 79 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( expression ) 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 57 79 97 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 54 75 93 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 65 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = expression ; 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 39 48 65 84 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare assign_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 38 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 33 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare sentence_list } 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 27 29 33 46 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 65 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = expression ; 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 39 48 65 84 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare assign_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 38 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 33 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare sentence_list } 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 27 29 33 46 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A sentence_block 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 42 60 83 101 107 110 112 113 114 115 116 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M if_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 35 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 53 73 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= NUM 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 53 73 56 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 53 73 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 53 73 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 53 73 91 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 55 77 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * NUM 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 55 77 56 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 55 77 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 55 77 95 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 65 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = expression ; 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 39 48 65 84 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare assign_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 38 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 65 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = expression ; 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 39 48 65 84 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M assign_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 38 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 34 47 64 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 33 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence_list } 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 27 29 33 46 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A sentence_block 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 41 59 82 100 106 109 111 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M while_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 36 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return ID 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 58 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return factor 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 55 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return item 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 54 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return add_expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 53 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return expression 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 52 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return expression ; 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 40 52 68 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return_sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 37 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 34 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 34 47 64 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence M sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 34 47 64 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence M sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 34 47 64 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence_list 
state_stack:0 1 4 7 9 13 16 18 23 27 29 33 
symbol_stack:# N int ID M A ( parameter ) { inner_declare sentence_list } 
state_stack:0 1 4 7 9 13 16 18 23 27 29 33 46 
symbol_stack:# N int ID M A ( parameter ) sentence_block 
state_stack:0 1 4 7 9 13 16 18 23 26 
symbol_stack:# N int ID M A function_declare 
state_stack:0 1 4 7 9 13 15 
symbol_stack:# N declare 
state_stack:0 1 3 
symbol_stack:# N declare int 
state_stack:0 1 3 4 
symbol_stack:# N declare int ID 
state_stack:0 1 3 4 7 
symbol_stack:# N declare int ID M 
state_stack:0 1 3 4 7 9 
symbol_stack:# N declare int ID M A 
state_stack:0 1 3 4 7 9 13 
symbol_stack:# N declare int ID M A ( 
state_stack:0 1 3 4 7 9 13 16 
symbol_stack:# N declare int ID M A ( int 
state_stack:0 1 3 4 7 9 13 16 22 
symbol_stack:# N declare int ID M A ( int ID 
state_stack:0 1 3 4 7 9 13 16 22 25 
symbol_stack:# N declare int ID M A ( param 
state_stack:0 1 3 4 7 9 13 16 21 
symbol_stack:# N declare int ID M A ( parameter_list 
state_stack:0 1 3 4 7 9 13 16 19 
symbol_stack:# N declare int ID M A ( parameter 
state_stack:0 1 3 4 7 9 13 16 18 
symbol_stack:# N declare int ID M A ( parameter ) 
state_stack:0 1 3 4 7 9 13 16 18 23 
symbol_stack:# N declare int ID M A ( parameter ) { 
state_stack:0 1 3 4 7 9 13 16 18 23 27 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = ID 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 58 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = factor 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 55 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = item 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 54 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = item + 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 54 75 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = item + NUM 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 54 75 56 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = item + factor 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 54 75 55 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = item + item 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 54 75 54 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = item + add_expression 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 54 75 93 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = add_expression 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 53 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = expression 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 65 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare ID = expression ; 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 39 48 65 84 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare assign_sentence 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 38 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return ID 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 58 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return factor 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 55 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return factor * 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 55 77 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return factor * NUM 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 55 77 56 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return factor * factor 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 55 77 55 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return factor * item 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 55 77 95 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return item 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 54 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return add_expression 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 53 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return expression 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 52 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return expression ; 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 40 52 68 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M return_sentence 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 37 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M sentence 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 34 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence M sentence_list 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 34 47 64 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence_list 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 33 
symbol_stack:# N declare int ID M A ( parameter ) { inner_declare sentence_list } 
state_stack:0 1 3 4 7 9 13 16 18 23 27 29 33 46 
symbol_stack:# N declare int ID M A ( parameter ) sentence_block 
state_stack:0 1 3 4 7 9 13 16 18 23 26 
symbol_stack:# N declare int ID M A function_declare 
state_stack:0 1 3 4 7 9 13 15 
symbol_stack:# N declare declare 
state_stack:0 1 3 3 
symbol_stack:# N declare declare void 
state_stack:0 1 3 3 5 
symbol_stack:# N declare declare void ID 
state_stack:0 1 3 3 5 8 
symbol_stack:# N declare declare void ID M 
state_stack:0 1 3 3 5 8 12 
symbol_stack:# N declare declare void ID M A 
state_stack:0 1 3 3 5 8 12 14 
symbol_stack:# N declare declare void ID M A ( 
state_stack:0 1 3 3 5 8 12 14 16 
symbol_stack:# N declare declare void ID M A ( void 
state_stack:0 1 3 3 5 8 12 14 16 20 
symbol_stack:# N declare declare void ID M A ( parameter 
state_stack:0 1 3 3 5 8 12 14 16 18 
symbol_stack:# N declare declare void ID M A ( parameter ) 
state_stack:0 1 3 3 5 8 12 14 16 18 23 
symbol_stack:# N declare declare void ID M A ( parameter ) { 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 
symbol_stack:# N declare declare void ID M A ( parameter ) { int 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { int ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 31 44 62 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_array_declare 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 32 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_array_declare ; 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 32 45 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_array_declare ; inner_declare 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 32 45 63 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 56 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 86 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare ID array = expression ; 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 39 50 67 86 103 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare assign_sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 38 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 58 81 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = item + 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 54 75 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = item + NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 54 75 56 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = item + factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 54 75 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = item + item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 54 75 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = item + add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 54 75 93 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 86 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M ID array = expression ; 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 39 50 67 86 103 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M assign_sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 38 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 58 81 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 58 81 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = item + add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 54 75 93 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 86 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID array = expression ; 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 39 50 67 86 103 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M assign_sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 38 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 58 81 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 58 81 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ NUM ] [ 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 66 85 49 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ NUM ] [ NUM 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 66 85 49 66 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ NUM ] [ NUM ] 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 66 85 49 66 85 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID [ NUM ] array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 49 66 85 102 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( ID array 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 58 81 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 99 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( argument_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 98 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , ID ( argument_list ) 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 58 80 98 104 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 99 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , expression , argument_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 99 105 108 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( expression , argument_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 99 105 108 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( argument_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 98 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = ID ( argument_list ) 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 58 80 98 104 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = factor 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 55 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = item 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 54 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = add_expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 53 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = expression 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 86 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID array = expression ; 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 39 50 67 86 103 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M assign_sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 38 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 47 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M return 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 47 40 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M return ; 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 47 40 51 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M return_sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 47 37 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M sentence 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 47 34 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M sentence_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 34 47 64 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 34 47 64 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 34 47 64 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence M sentence_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 34 47 64 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence_list 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 33 
symbol_stack:# N declare declare void ID M A ( parameter ) { inner_declare sentence_list } 
state_stack:0 1 3 3 5 8 12 14 16 18 23 27 29 33 46 
symbol_stack:# N declare declare void ID M A ( parameter ) sentence_block 
state_stack:0 1 3 3 5 8 12 14 16 18 23 26 
symbol_stack:# N declare declare void ID M A function_declare 
state_stack:0 1 3 3 5 8 12 14 17 
symbol_stack:# N declare declare declare 
state_stack:0 1 3 3 3 
symbol_stack:# N declare declare declare_list 
state_stack:0 1 3 3 6 
symbol_stack:# N declare declare_list 
state_stack:0 1 3 6 
symbol_stack:# N declare_list 
state_stack:0 1 2 
