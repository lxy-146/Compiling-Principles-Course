symbol_stack:# 
state_stack:0 
symbol_stack:# N 
state_stack:0 1 
symbol_stack:# N int 
state_stack:0 1 4 
symbol_stack:# N int ID 
state_stack:0 1 4 7 
symbol_stack:# N int ID ; 
state_stack:0 1 4 7 11 
symbol_stack:# N int ID var_declare 
state_stack:0 1 4 7 10 
symbol_stack:# N declare 
state_stack:0 1 3 
symbol_stack:# N declare int 
state_stack:0 1 3 4 
symbol_stack:# N declare int ID 
state_stack:0 1 3 4 7 
symbol_stack:# N declare int ID ; 
state_stack:0 1 3 4 7 11 
symbol_stack:# N declare int ID var_declare 
state_stack:0 1 3 4 7 10 
symbol_stack:# N declare declare 
state_stack:0 1 3 3 
symbol_stack:# N declare declare int 
state_stack:0 1 3 3 4 
symbol_stack:# N declare declare int ID 
state_stack:0 1 3 3 4 7 
symbol_stack:# N declare declare int ID M 
state_stack:0 1 3 3 4 7 9 
symbol_stack:# N declare declare int ID M A 
state_stack:0 1 3 3 4 7 9 13 
symbol_stack:# N declare declare int ID M A ( 
state_stack:0 1 3 3 4 7 9 13 16 
symbol_stack:# N declare declare int ID M A ( int 
state_stack:0 1 3 3 4 7 9 13 16 22 
symbol_stack:# N declare declare int ID M A ( int ID 
state_stack:0 1 3 3 4 7 9 13 16 22 25 
symbol_stack:# N declare declare int ID M A ( param 
state_stack:0 1 3 3 4 7 9 13 16 21 
symbol_stack:# N declare declare int ID M A ( param , 
state_stack:0 1 3 3 4 7 9 13 16 21 24 
symbol_stack:# N declare declare int ID M A ( param , int 
state_stack:0 1 3 3 4 7 9 13 16 21 24 22 
symbol_stack:# N declare declare int ID M A ( param , int ID 
state_stack:0 1 3 3 4 7 9 13 16 21 24 22 25 
symbol_stack:# N declare declare int ID M A ( param , param 
state_stack:0 1 3 3 4 7 9 13 16 21 24 21 
symbol_stack:# N declare declare int ID M A ( param , param , 
state_stack:0 1 3 3 4 7 9 13 16 21 24 21 24 
symbol_stack:# N declare declare int ID M A ( param , param , int 
state_stack:0 1 3 3 4 7 9 13 16 21 24 21 24 22 
symbol_stack:# N declare declare int ID M A ( param , param , int ID 
state_stack:0 1 3 3 4 7 9 13 16 21 24 21 24 22 25 
symbol_stack:# N declare declare int ID M A ( param , param , param 
state_stack:0 1 3 3 4 7 9 13 16 21 24 21 24 21 
symbol_stack:# N declare declare int ID M A ( param , param , parameter_list 
state_stack:0 1 3 3 4 7 9 13 16 21 24 21 24 28 
symbol_stack:# N declare declare int ID M A ( param , parameter_list 
state_stack:0 1 3 3 4 7 9 13 16 21 24 28 
symbol_stack:# N declare declare int ID M A ( parameter_list 
state_stack:0 1 3 3 4 7 9 13 16 19 
symbol_stack:# N declare declare int ID M A ( parameter 
state_stack:0 1 3 3 4 7 9 13 16 18 
symbol_stack:# N declare declare int ID M A ( parameter ) 
state_stack:0 1 3 3 4 7 9 13 16 18 23 
symbol_stack:# N declare declare int ID M A ( parameter ) { 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 
symbol_stack:# N declare declare int ID M A ( parameter ) { int 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 31 
symbol_stack:# N declare declare int ID M A ( parameter ) { int ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 31 43 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; int 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 31 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; int ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 31 43 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; inner_var_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 30 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 30 42 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; inner_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 30 42 57 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_var_declare ; inner_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 30 42 57 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = NUM 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 52 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 59 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare ID = expression ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 38 46 59 75 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare assign_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 37 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 50 67 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 50 67 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 50 67 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 50 67 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( item + add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 50 67 82 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 71 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > ( expression ) 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 53 71 86 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( add_expression > add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 49 61 76 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 51 69 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 51 69 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 51 69 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( factor * item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 51 69 84 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 50 67 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + NUM 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 50 67 52 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 50 67 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 50 67 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( item + add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 50 67 82 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 71 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + ( expression ) 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 53 71 86 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = item + add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 50 67 82 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 59 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare ID = expression ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 38 46 59 75 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare assign_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 37 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 32 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A { inner_declare sentence_list } 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 27 29 32 44 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 59 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare ID = expression ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 38 46 59 75 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare assign_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 37 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 32 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A { inner_declare sentence_list } 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 27 29 32 44 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if ( expression ) A sentence_block N else M A sentence_block 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 41 56 74 90 94 97 99 100 101 102 103 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M if_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 34 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 49 65 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= NUM 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 49 65 52 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 49 65 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 49 65 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( add_expression <= add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 49 65 80 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 51 69 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * NUM 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 51 69 52 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 51 69 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = factor * item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 51 69 84 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 59 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare ID = expression ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 38 46 59 75 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare assign_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 37 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 59 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M ID = expression ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 38 46 59 75 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M assign_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 37 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence M sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 33 45 58 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 32 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A { inner_declare sentence_list } 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 27 29 32 44 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while M ( expression ) A sentence_block 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 40 55 73 89 93 96 98 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M while_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 35 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return ID 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 54 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return factor 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 51 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return item 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 50 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return add_expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 49 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return expression 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 48 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return expression ; 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 39 48 60 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M return_sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 36 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 33 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 33 45 58 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence M sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 33 45 58 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence M sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 33 45 58 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence_list 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 32 
symbol_stack:# N declare declare int ID M A ( parameter ) { inner_declare sentence_list } 
state_stack:0 1 3 3 4 7 9 13 16 18 23 27 29 32 44 
symbol_stack:# N declare declare int ID M A ( parameter ) sentence_block 
state_stack:0 1 3 3 4 7 9 13 16 18 23 26 
symbol_stack:# N declare declare int ID M A function_declare 
state_stack:0 1 3 3 4 7 9 13 15 
symbol_stack:# N declare declare declare 
state_stack:0 1 3 3 3 
symbol_stack:# N declare declare declare int 
state_stack:0 1 3 3 3 4 
symbol_stack:# N declare declare declare int ID 
state_stack:0 1 3 3 3 4 7 
symbol_stack:# N declare declare declare int ID M 
state_stack:0 1 3 3 3 4 7 9 
symbol_stack:# N declare declare declare int ID M A 
state_stack:0 1 3 3 3 4 7 9 13 
symbol_stack:# N declare declare declare int ID M A ( 
state_stack:0 1 3 3 3 4 7 9 13 16 
symbol_stack:# N declare declare declare int ID M A ( int 
state_stack:0 1 3 3 3 4 7 9 13 16 22 
symbol_stack:# N declare declare declare int ID M A ( int ID 
state_stack:0 1 3 3 3 4 7 9 13 16 22 25 
symbol_stack:# N declare declare declare int ID M A ( param 
state_stack:0 1 3 3 3 4 7 9 13 16 21 
symbol_stack:# N declare declare declare int ID M A ( parameter_list 
state_stack:0 1 3 3 3 4 7 9 13 16 19 
symbol_stack:# N declare declare declare int ID M A ( parameter 
state_stack:0 1 3 3 3 4 7 9 13 16 18 
symbol_stack:# N declare declare declare int ID M A ( parameter ) 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = ID 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 54 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = factor 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 51 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = item 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 50 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = item + 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 50 67 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = item + NUM 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 50 67 52 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = item + factor 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 50 67 51 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = item + item 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 50 67 50 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = item + add_expression 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 50 67 82 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = add_expression 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 49 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = expression 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 59 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare ID = expression ; 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 38 46 59 75 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare assign_sentence 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 37 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return ID 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 54 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return factor 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 51 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return factor * 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 51 69 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return factor * NUM 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 51 69 52 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return factor * factor 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 51 69 51 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return factor * item 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 51 69 84 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return item 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 50 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return add_expression 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 49 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return expression 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 48 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return expression ; 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 39 48 60 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M return_sentence 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 36 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M sentence 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 33 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence M sentence_list 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 33 45 58 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence_list 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 32 
symbol_stack:# N declare declare declare int ID M A ( parameter ) { inner_declare sentence_list } 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 27 29 32 44 
symbol_stack:# N declare declare declare int ID M A ( parameter ) sentence_block 
state_stack:0 1 3 3 3 4 7 9 13 16 18 23 26 
symbol_stack:# N declare declare declare int ID M A function_declare 
state_stack:0 1 3 3 3 4 7 9 13 15 
symbol_stack:# N declare declare declare declare 
state_stack:0 1 3 3 3 3 
symbol_stack:# N declare declare declare declare void 
state_stack:0 1 3 3 3 3 5 
symbol_stack:# N declare declare declare declare void ID 
state_stack:0 1 3 3 3 3 5 8 
symbol_stack:# N declare declare declare declare void ID M 
state_stack:0 1 3 3 3 3 5 8 12 
symbol_stack:# N declare declare declare declare void ID M A 
state_stack:0 1 3 3 3 3 5 8 12 14 
symbol_stack:# N declare declare declare declare void ID M A ( 
state_stack:0 1 3 3 3 3 5 8 12 14 16 
symbol_stack:# N declare declare declare declare void ID M A ( void 
state_stack:0 1 3 3 3 3 5 8 12 14 16 20 
symbol_stack:# N declare declare declare declare void ID M A ( parameter 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { int 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 31 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { int ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 31 43 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; int 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 31 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; int ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 31 43 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; int 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 31 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; int ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 31 43 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; inner_var_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 30 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; inner_var_declare ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 30 42 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; inner_var_declare ; inner_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 30 42 57 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_var_declare ; inner_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 30 42 57 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_var_declare ; inner_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 30 42 57 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = NUM 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 52 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 59 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare ID = expression ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 38 46 59 75 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare assign_sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 37 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = NUM 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 52 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 59 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M ID = expression ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 38 46 59 75 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M assign_sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 37 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = NUM 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 52 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 59 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M ID = expression ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 38 46 59 75 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M assign_sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 37 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 54 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 54 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( ID 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 54 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 88 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( argument_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 87 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , ID ( argument_list ) 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 54 72 87 91 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 88 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , expression , argument_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 88 92 95 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( expression , argument_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 88 92 95 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( argument_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 87 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = ID ( argument_list ) 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 54 72 87 91 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = factor 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 51 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = item 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 50 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = add_expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 49 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = expression 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 59 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M ID = expression ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 38 46 59 75 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M assign_sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 37 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 45 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M return 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 45 39 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M return ; 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 45 39 47 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M return_sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 45 36 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M sentence 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 45 33 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence M sentence_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 33 45 58 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence M sentence_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 33 45 58 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence M sentence_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 33 45 58 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence M sentence_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 33 45 58 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence_list 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 32 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) { inner_declare sentence_list } 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 27 29 32 44 
symbol_stack:# N declare declare declare declare void ID M A ( parameter ) sentence_block 
state_stack:0 1 3 3 3 3 5 8 12 14 16 18 23 26 
symbol_stack:# N declare declare declare declare void ID M A function_declare 
state_stack:0 1 3 3 3 3 5 8 12 14 17 
symbol_stack:# N declare declare declare declare declare 
state_stack:0 1 3 3 3 3 3 
symbol_stack:# N declare declare declare declare declare_list 
state_stack:0 1 3 3 3 3 6 
symbol_stack:# N declare declare declare declare_list 
state_stack:0 1 3 3 3 6 
symbol_stack:# N declare declare declare_list 
state_stack:0 1 3 3 6 
symbol_stack:# N declare declare_list 
state_stack:0 1 3 6 
symbol_stack:# N declare_list 
state_stack:0 1 2 
